<div class="card w-75 mb-2">
    <div class="card-header bg-dark text-white">
        <h5 class="card-title">Cambiar contraseña</h5>
    </div>
    <div class="card-body">
        <EditForm OnValidSubmit="ChangePasswordMethod" Model="data">
            <DataAnnotationsValidator/>
            <div class="mb-3">
                <label for="old_password" class="form-label fw-bold">Contraseña Actual</label>
                <InputText id="old_password" type="password" class="form-control" @bind-Value=data.OldPassword></InputText>
                <ValidationMessage For="()=>data.OldPassword"/>
            </div>
            <div class="mb-3">
                <label for="password1" class="form-label fw-bold">Contraseña Nueva</label>
                <InputText type="password" class="form-control" id="password1" @bind-Value=data.NewPassword></InputText>
                <ValidationMessage For="()=>data.NewPassword" />
            </div>
            <div class="mb-3">
                <label for="password2" class="form-label fw-bold">Confirmar Contraseña</label>
                <InputText type="password" class="form-control" id="password2" @bind-Value=data.NewPasswordConfirm></InputText>
                <ValidationMessage For="()=>data.NewPasswordConfirm" />
            </div>
            @if (!string.IsNullOrWhiteSpace(sms))
            {
                <div class="alert">
                    <p class="@sms_type">@sms</p>
                </div>
            }
            <button type="submit" class="btn btn-primary @(data.Change?"":"disabled")">Cambiar</button>
        </EditForm>
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        var auth = await authState.GetAuthenticationStateAsync();
        if (auth.User.Identity!.IsAuthenticated)
        {
            var Id = auth.User.FindFirstValue(ClaimTypes.NameIdentifier)??"0";
            data = new UsuarioChangePasswordRequest() { Id = int.Parse(Id) };
        }
    }

    public string? sms { get; set; }
    public string sms_type { get; set; } = "text-danger";

    public UsuarioChangePasswordRequest data { get; set; } = new UsuarioChangePasswordRequest();

    public async void ChangePasswordMethod()
    {
        sms = "";
        if (!data.Change)
        {
            sms = "Las contraseñas no coinciden!";
        }
        else
        {
            var r = await userManagerService.ChangePassword(data);
            if (r.Success)
            {
                data.Reset();
                sms = r.Message;
                sms_type = "text-success";
            }
            else
            {
                sms = r.Message;
                sms_type = "text-danger";
            }
            StateHasChanged();
        }

    }
}
